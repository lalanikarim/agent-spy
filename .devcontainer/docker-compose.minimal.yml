version: "3.8"

services:
  postgresql:
    image: postgres:16-alpine
    container_name: agentspy-minimal-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: agentspy_minimal
      POSTGRES_USER: agentspy_user
      POSTGRES_PASSWORD: agentspy_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgresql_minimal_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentspy_user -d agentspy_minimal"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - agentspy-minimal-network

  backend:
    build:
      context: ..
      dockerfile: .devcontainer/backend.simple.Dockerfile
    container_name: agentspy-minimal-backend
    volumes:
      - ..:/workspace:cached
    working_dir: /workspace
    environment:
      # Backend development configuration
      DATABASE_TYPE: ${DATABASE_TYPE:-sqlite}
      DATABASE_URL: ${DATABASE_URL:-sqlite+aiosqlite:///./agentspy.db}
      ENVIRONMENT: development
      DEBUG: true
      HOST: 0.0.0.0
      PORT: 8000
      LOG_LEVEL: DEBUG
      PYTHONPATH: /workspace

      # PostgreSQL Settings (used when DATABASE_TYPE=postgresql)
      DATABASE_HOST: ${DATABASE_HOST:-postgresql}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-agentspy_minimal}
      DATABASE_USER: ${DATABASE_USER:-agentspy_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-agentspy_password}
      DATABASE_SSL_MODE: ${DATABASE_SSL_MODE:-disable}
      DATABASE_MAX_CONNECTIONS: ${DATABASE_MAX_CONNECTIONS:-20}

      # Redis Settings (Optional - for enhanced development experience)
      REDIS_ENABLED: ${REDIS_ENABLED:-true}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DATABASE: ${REDIS_DATABASE:-0}
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-10}
      REDIS_RETRY_ON_TIMEOUT: ${REDIS_RETRY_ON_TIMEOUT:-true}
      REDIS_SOCKET_TIMEOUT: ${REDIS_SOCKET_TIMEOUT:-5}
      REDIS_SOCKET_CONNECT_TIMEOUT: ${REDIS_SOCKET_CONNECT_TIMEOUT:-5}
    ports:
      - "8000:8000"
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - agentspy-minimal-network

  # Redis Cache (Optional - for enhanced development experience)
  redis:
    image: redis:7-alpine
    container_name: agentspy-minimal-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379" # Use different port to avoid conflicts
    volumes:
      - redis_minimal_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - agentspy-minimal-network

  frontend:
    build:
      context: ..
      dockerfile: .devcontainer/frontend.simple.Dockerfile
    container_name: agentspy-minimal-frontend
    volumes:
      - ../frontend:/workspace/frontend:cached
      - ../.cursor:/workspace/.cursor:cached
    working_dir: /workspace/frontend
    # Use supervisor to manage dev server with auto-restart
    command: /usr/local/bin/frontend-supervisor.sh
    environment:
      # Frontend development configuration
      VITE_API_BASE_URL: http://localhost:8000/api/v1
      VITE_BACKEND_PORT: 8000
      VITE_FRONTEND_PORT: 3000
      VITE_BACKEND_HOST: localhost
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - agentspy-minimal-network

volumes:
  postgresql_minimal_data:
    driver: local
  redis_minimal_data:
    driver: local

networks:
  agentspy-minimal-network:
    driver: bridge
