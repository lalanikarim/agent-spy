version: "3.8"

services:
  dev-container-postgresql:
    image: postgres:16-alpine
    container_name: agentspy-dev-container-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agentspy_dev_container}
      POSTGRES_USER: ${POSTGRES_USER:-agentspy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agentspy_password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DATABASE_PORT:-5432}:${POSTGRES_PORT}"
    volumes:
      - postgresql_dev_container_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-agentspy_user} -d ${POSTGRES_DB:-agentspy_dev_container}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - agentspy-dev-container-network

  # Jaeger for OTLP testing
  dev-container-jaeger:
    image: cr.jaegertracing.io/jaegertracing/jaeger:2.9.0
    container_name: agentspy-dev-container-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686" # Jaeger UI
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "5778:5778" # Admin port
      - "9411:9411" # Zipkin compatible endpoint
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - agentspy-dev-container-network

  dev-container-backend:
    build:
      context: ..
      dockerfile: .devcontainer/backend.simple.Dockerfile
    container_name: agentspy-dev-container-backend
    volumes:
      - ..:/workspace:cached
      - sqlite_data:/workspace/data
    working_dir: /workspace
    environment:
      # Application Settings
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      HOST: 0.0.0.0
      PORT: 8000

      # Database Settings
      DATABASE_TYPE: ${DATABASE_TYPE:-sqlite}
      # DATABASE_URL: ${DATABASE_URL:-sqlite+aiosqlite:///./data/agentspy.db}
      DATABASE_ECHO: ${DATABASE_ECHO:-true}

      # PostgreSQL Settings (used when DATABASE_TYPE=postgresql)
      DATABASE_HOST: ${DATABASE_HOST:-dev-container-postgresql}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-agentspy_dev_container}
      DATABASE_USER: ${DATABASE_USER:-agentspy_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-agentspy_password}
      DATABASE_SSL_MODE: ${DATABASE_SSL_MODE:-disable}
      DATABASE_MAX_CONNECTIONS: ${DATABASE_MAX_CONNECTIONS:-20}

      # API Settings
      API_PREFIX: /api/v1
      REQUIRE_AUTH: ${REQUIRE_AUTH:-false}
      API_KEYS: ${API_KEYS:-}

      # CORS Settings
      CORS_ORIGINS: "*"
      CORS_CREDENTIALS: ${CORS_CREDENTIALS:-true}

      # OTLP Settings - Disable gRPC to avoid port conflict with Jaeger
      OTLP_HTTP_ENABLED: ${OTLP_HTTP_ENABLED:-true}
      OTLP_HTTP_PATH: ${OTLP_HTTP_PATH:-/v1/traces}
      OTLP_GRPC_ENABLED: ${OTLP_GRPC_ENABLED:-false} # Disabled to avoid port conflict
      BACKEND_OTLP_GRPC_HOST: ${BACKEND_OTLP_GRPC_HOST:-0.0.0.0}
      BACKEND_OTLP_GRPC_PORT: ${BACKEND_OTLP_GRPC_PORT:-4317}

      # OTLP Forwarder Settings for testing
      OTLP_FORWARDER_ENABLED: ${OTLP_FORWARDER_ENABLED:-true}
      OTLP_FORWARDER_ENDPOINT: ${OTLP_FORWARDER_ENDPOINT:-dev-container-jaeger:4317}
      OTLP_FORWARDER_PROTOCOL: ${OTLP_FORWARDER_PROTOCOL:-grpc}
      OTLP_FORWARDER_SERVICE_NAME: ${OTLP_FORWARDER_SERVICE_NAME:-agent-spy-forwarder}
      OTLP_FORWARDER_TIMEOUT: ${OTLP_FORWARDER_TIMEOUT:-30}
      OTLP_FORWARDER_RETRY_COUNT: ${OTLP_FORWARDER_RETRY_COUNT:-3}

      # Performance Settings
      MAX_TRACE_SIZE_MB: ${MAX_TRACE_SIZE_MB:-10}
      REQUEST_TIMEOUT: ${REQUEST_TIMEOUT:-30}

      # Logging Settings
      LOG_LEVEL: ${LOG_LEVEL:-DEBUG}
      LOG_FORMAT: ${LOG_FORMAT:-text}

      # Development Settings
      PYTHONPATH: /workspace
    ports:
      - "${BACKEND_EXTERNAL_PORT:-8000}:8000" # Main API
      # Note: OTLP gRPC port (4317) is disabled to avoid conflict with Jaeger
    depends_on:
      dev-container-postgresql:
        condition: service_healthy
      dev-container-jaeger:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentspy-dev-container-network

  dev-container-frontend:
    build:
      context: ..
      dockerfile: .devcontainer/frontend.simple.Dockerfile
    container_name: agentspy-dev-container-frontend
    volumes:
      - ../frontend:/workspace/frontend:cached
      - ../.cursor:/workspace/.cursor:cached
    working_dir: /workspace/frontend
    # Use supervisor to manage dev server with auto-restart
    command: /usr/local/bin/frontend-supervisor.sh
    environment:
      # Frontend development configuration
      VITE_API_BASE_URL: http://localhost:${BACKEND_EXTERNAL_PORT:-8000}/api/v1
      VITE_BACKEND_PORT: 8000
      VITE_FRONTEND_PORT: 3000
      VITE_BACKEND_HOST: localhost
      NODE_ENV: development
    ports:
      - "${FRONTEND_EXTERNAL_PORT:-3001}:3000"
      - "5173:5173"
    depends_on:
      - dev-container-backend
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentspy-dev-container-network

volumes:
  sqlite_data:
    driver: local
  postgresql_dev_container_data:
    driver: local

networks:
  agentspy-dev-container-network:
    driver: bridge
