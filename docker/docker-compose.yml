version: "3.8"

services:
  # PostgreSQL Database
  prod-postgresql:
    image: postgres:16-alpine
    container_name: agentspy-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agentspy}
      POSTGRES_USER: ${POSTGRES_USER:-agentspy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agentspy_password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DATABASE_PORT:-5432}:${POSTGRES_PORT}"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-postgresql.sql:/docker-entrypoint-initdb.d/init-postgresql.sql:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-agentspy_user} -d ${POSTGRES_DB:-agentspy}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - agentspy-network

  # Agent Spy Backend API
  prod-backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    container_name: agentspy-backend
    restart: unless-stopped
    environment:
      # Application Settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      HOST: 0.0.0.0
      PORT: 8000

      # Database Settings
      DATABASE_TYPE: ${DATABASE_TYPE:-sqlite}
      # DATABASE_URL: ${DATABASE_URL:-sqlite+aiosqlite:////app/data/agentspy.db}
      DATABASE_ECHO: ${DATABASE_ECHO:-false}

      # PostgreSQL Settings (used when DATABASE_TYPE=postgresql)
      DATABASE_HOST: ${DATABASE_HOST:-prod-postgresql}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-agentspy}
      DATABASE_USER: ${DATABASE_USER:-agentspy_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-agentspy_password}
      DATABASE_SSL_MODE: ${DATABASE_SSL_MODE:-disable}
      DATABASE_MAX_CONNECTIONS: ${DATABASE_MAX_CONNECTIONS:-20}

      # API Settings
      API_PREFIX: /api/v1
      REQUIRE_AUTH: ${REQUIRE_AUTH:-false}
      API_KEYS: ${API_KEYS:-}

      # CORS Settings
      CORS_ORIGINS: "*"
      CORS_CREDENTIALS: ${CORS_CREDENTIALS:-true}

      # OTLP Settings
      OTLP_HTTP_ENABLED: ${OTLP_HTTP_ENABLED:-true}
      OTLP_HTTP_PATH: ${OTLP_HTTP_PATH:-/v1/traces}
      OTLP_GRPC_ENABLED: ${OTLP_GRPC_ENABLED:-true}
      BACKEND_OTLP_GRPC_HOST: ${BACKEND_OTLP_GRPC_HOST:-0.0.0.0}
      BACKEND_OTLP_GRPC_PORT: ${BACKEND_OTLP_GRPC_PORT:-4317}

      # Performance Settings
      MAX_TRACE_SIZE_MB: ${MAX_TRACE_SIZE_MB:-10}
      REQUEST_TIMEOUT: ${REQUEST_TIMEOUT:-30}

      # Logging Settings
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
    ports:
      - "${BACKEND_EXTERNAL_PORT:-8000}:8000" # Main API
      - "${OTLP_EXTERNAL_PORT:-4317}:4317" # OTLP gRPC
    volumes:
      - sqlite_data:/app/data
    depends_on:
      prod-postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentspy-network

  # Agent Spy Frontend
  prod-frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
      args:
        - VITE_API_BASE_URL=/api/v1
        - BACKEND_SERVICE_NAME=prod-backend
        - BACKEND_PORT=8000
    container_name: agentspy-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_EXTERNAL_PORT:-3000}:80"
    depends_on:
      - prod-backend
    environment:
      - VITE_BACKEND_HOST=${BACKEND_HOST:-localhost}
      - VITE_BACKEND_PORT=${BACKEND_EXTERNAL_PORT:-8000}
      - VITE_API_BASE_URL=http://${BACKEND_HOST:-localhost}:${BACKEND_EXTERNAL_PORT:-8000}/api/v1
      - FRONTEND_PORT=3000
      - VITE_FRONTEND_PORT=3000
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:80/",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - agentspy-network

volumes:
  sqlite_data:
    driver: local
  postgresql_data:
    driver: local

networks:
  agentspy-network:
    driver: bridge
