version: "3.8"

services:
  # PostgreSQL Database (Development)
  postgresql:
    image: postgres:16-alpine
    container_name: agentspy-postgresql-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agentspy_dev}
      POSTGRES_USER: ${POSTGRES_USER:-agentspy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-agentspy_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgresql_dev_data:/var/lib/postgresql/data
      - ./init-postgresql.sql:/docker-entrypoint-initdb.d/init-postgresql.sql:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-agentspy_user} -d ${POSTGRES_DB:-agentspy_dev}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - agentspy-dev-network

  # Agent Spy Backend API (Development)
  backend:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    container_name: agentspy-backend-dev
    restart: unless-stopped
    environment:
      # Application Settings
      ENVIRONMENT: development
      DEBUG: true
      HOST: 0.0.0.0
      PORT: 8000
      RELOAD: true

      # Database Settings
      DATABASE_TYPE: ${DATABASE_TYPE:-sqlite}
      DATABASE_URL: ${DATABASE_URL:-sqlite+aiosqlite:////app/data/agentspy_dev.db}
      DATABASE_ECHO: ${DATABASE_ECHO:-true}

      # PostgreSQL Settings (used when DATABASE_TYPE=postgresql)
      DATABASE_HOST: ${DATABASE_HOST:-postgresql}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DATABASE_NAME: ${DATABASE_NAME:-agentspy_dev}
      DATABASE_USER: ${DATABASE_USER:-agentspy_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-agentspy_password}
      DATABASE_SSL_MODE: ${DATABASE_SSL_MODE:-disable}
      DATABASE_MAX_CONNECTIONS: ${DATABASE_MAX_CONNECTIONS:-20}

      # API Settings
      API_PREFIX: /api/v1
      REQUIRE_AUTH: false

      # CORS Settings - Allow all origins in development
      CORS_ORIGINS: "*"
      CORS_CREDENTIALS: true

      # Performance Settings
      MAX_TRACE_SIZE_MB: ${MAX_TRACE_SIZE_MB:-50}
      REQUEST_TIMEOUT: ${REQUEST_TIMEOUT:-60}

      # Logging Settings
      LOG_LEVEL: DEBUG
      LOG_FORMAT: text
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for development
      - ../src:/app/src:ro
      - ../pyproject.toml:/app/pyproject.toml:ro
      - ../uv.lock:/app/uv.lock:ro
      # Mount .cursor directory for diagnostics and artifacts
      - ../.cursor:/app/.cursor:cached
      # SQLite database volume
      - sqlite_dev_data:/app/data
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - agentspy-dev-network

  # Agent Spy Frontend (Development)
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend-dev-standalone.Dockerfile
    container_name: agentspy-frontend-dev
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0 --port 3000
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reloading
      - ../frontend/src:/app/src:ro
      - ../frontend/public:/app/public:ro
      - ../frontend/index.html:/app/index.html:ro
      - ../frontend/vite.config.ts:/app/vite.config.ts:ro
      - ../frontend/package.json:/app/package.json:ro
      # Mount .cursor directory for diagnostics and artifacts
      - ../.cursor:/app/.cursor:cached
    depends_on:
      - backend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_BACKEND_HOST=localhost
      - VITE_BACKEND_PORT=8000
      - VITE_FRONTEND_PORT=3000
      - NODE_ENV=development
    networks:
      - agentspy-dev-network

volumes:
  sqlite_dev_data:
    driver: local
  postgresql_dev_data:
    driver: local

networks:
  agentspy-dev-network:
    driver: bridge
